import requests
import json
import random
import time
import os
from colorama import init, Fore, Style
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from concurrent.futures import ThreadPoolExecutor
import threading
import json



print_lock = threading.Lock()
    
init(autoreset=True)

def check_cookie_validity(session, cookies):
    headers = {
        'Cookie': f'.ROBLOSECURITY={cookies}',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    url = 'https://users.roblox.com/v1/users/authenticated'
    try:
        response = session.get(url, headers=headers, timeout=10)
        return response.status_code == 200
    except:
        return False

def get_csrf_token(session, cookies):
    headers = {
        'Cookie': f'.ROBLOSECURITY={cookies}',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    url = 'https://auth.roblox.com/v2/logout'
    try:
        response = session.post(url, headers=headers, json={})
        token = response.headers.get('X-CSRF-TOKEN')
        return token if token else False
    except:
        return False

def get_user_id(session, cookies, csrf_token):
    """Lấy User ID từ cookie"""
    headers = {
        'Cookie': f'.ROBLOSECURITY={cookies}',
        'X-CSRF-TOKEN': csrf_token,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Content-Type': 'application/json'
    }
    

    url = 'https://users.roblox.com/v1/users/authenticated'
    response = session.get(url, headers=headers)
    
    if response.status_code == 200:
        user_data = response.json()
        user_id = str(user_data.get('id', ''))
        if user_id:
            return True, user_id
    return False, None
            

def purchase_item(session, cookies, csrf_token, user_id, item_config):
    idempotency_key = str(uuid.uuid4())   
    payload = {
        "collectibleItemId": item_config["collectibleItemId"],
        "expectedCurrency": item_config["expectedCurrency"],
        "expectedPrice": item_config["expectedPrice"],
        "expectedPurchaserId": user_id,
        "expectedPurchaserType": "User",
        "expectedSellerId": item_config["expectedSellerId"],
        "expectedSellerType": "User",
        "idempotencyKey": idempotency_key,
        "collectibleProductId": item_config["collectibleProductId"]
    }
    
    headers = {
        'Cookie': f'.ROBLOSECURITY={cookies}',
        'X-CSRF-TOKEN': csrf_token,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    url = f"https://apis.roblox.com/marketplace-sales/v1/item/{item_config['collectibleItemId']}/purchase-item"
    response = session.post(url, headers=headers, json=payload, timeout=30)
    
    if response.status_code == 200:
        return True
    return False

def set_wearing_assets(session, cookies, csrf_token, item_config):

    headers = {
        'Cookie': f'.ROBLOSECURITY={cookies}',
        'X-CSRF-TOKEN': csrf_token,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    url = 'https://avatar.roblox.com/v2/avatar/set-wearing-assets'
    
    response = session.post(url, headers=headers, json=item_config['assets'], timeout=30)
    
    if response.status_code == 200:
        return True
    return False

def get_item_configs():
    return [
        {
            "collectibleItemId": "c74870d0-ec79-48f7-8181-95f82be4670b",
            "expectedCurrency": 1,
            "expectedPrice": 0,
            "expectedSellerId": 1,
            "collectibleProductId": "42a83633-f522-46d5-9155-917fe9c308f8",
            "assets": {
                "assets": [
                    {"id": 301827199, "name": "Visage de John", "assetType": {"id": 18, "name": "Face"}, "currentVersionId": 2260433499},
                    {"id": 301826032, "name": "XBOX_M - Torse", "assetType": {"id": 27, "name": "Torso"}, "currentVersionId": 28779109767},
                    {"id": 301825891, "name": "XBOX_M - Jambe droite", "assetType": {"id": 31, "name": "RightLeg"}, "currentVersionId": 11858040491},
                    {"id": 301825699, "name": "XBOX_M - Jambe gauche", "assetType": {"id": 30, "name": "LeftLeg"}, "currentVersionId": 29530383570},
                    {"id": 301825492, "name": "XBOX_M - Bras droit", "assetType": {"id": 28, "name": "RightArm"}, "currentVersionId": 25563500737},
                    {"id": 301824684, "name": "XBOX_M - Bras gauche", "assetType": {"id": 29, "name": "LeftArm"}, "currentVersionId": 25563494561},
                    {"id": 301820684, "name": "Écharpe de John ", "assetType": {"id": 43, "name": "NeckAccessory"}, "currentVersionId": 2260433449},
                    {"id": 301819845, "name": "Cheveux de John", "assetType": {"id": 41, "name": "HairAccessory"}, "currentVersionId": 2260433447, "meta": {"order": 13}},
                    {"id": 301811279, "name": "Pantalon de John", "assetType": {"id": 12, "name": "Pants"}, "currentVersionId": 602469216},
                    {"id": 301809996, "name": "Chemise de John", "assetType": {"id": 11, "name": "Shirt"}, "currentVersionId": 602468639}
                ]
            }
        },
        {
            "collectibleItemId": "edeb337d-21db-4d28-8340-3cbd936f329b",
            "expectedCurrency": 1,
            "expectedPrice": 0,
            "expectedSellerId": 1,
            "collectibleProductId": "226d2837-4577-45ae-bc7e-9e1847ebd4af",
            "assets": {
                "assets": [
                    {"id": 301827157, "name": "Visage de Casey", "assetType": {"id": 18, "name": "Face"}, "currentVersionId": 2260433505},
                    {"id": 301826032, "name": "XBOX_M - Torse", "assetType": {"id": 27, "name": "Torso"}, "currentVersionId": 28779109767},
                    {"id": 301825891, "name": "XBOX_M - Jambe droite", "assetType": {"id": 31, "name": "RightLeg"}, "currentVersionId": 11858040491},
                    {"id": 301825699, "name": "XBOX_M - Jambe gauche", "assetType": {"id": 30, "name": "LeftLeg"}, "currentVersionId": 29530383570},
                    {"id": 301825492, "name": "XBOX_M - Bras droit", "assetType": {"id": 28, "name": "RightArm"}, "currentVersionId": 25563500737},
                    {"id": 301824684, "name": "XBOX_M - Bras gauche", "assetType": {"id": 29, "name": "LeftArm"}, "currentVersionId": 25563494561},
                    {"id": 301820642, "name": "Lunettes de soleil de Casey", "assetType": {"id": 42, "name": "FaceAccessory"}, "currentVersionId": 2260433452},
                    {"id": 301819154, "name": "Cheveux de Casey", "assetType": {"id": 41, "name": "HairAccessory"}, "currentVersionId": 2260433441, "meta": {"order": 13}},
                    {"id": 301811027, "name": "Pantalon de Casey", "assetType": {"id": 12, "name": "Pants"}, "currentVersionId": 589536955},
                    {"id": 301809497, "name": "Chemise de Casey", "assetType": {"id": 11, "name": "Shirt"}, "currentVersionId": 589536420}
                ]
            }
        },
        {
            "collectibleItemId": "b937b401-d825-4a60-907c-e6ecc0fc11c5",
            "expectedCurrency": 1,
            "expectedPrice": 0,
            "expectedSellerId": 1,
            "collectibleProductId": "33c7e0b2-9449-41af-ba6b-8ed074484ead",
            "assets": {
                "assets": [
                    {"id": 12930215322, "name": "Lin - Tête", "assetType": {"id": 79, "name": "DynamicHead"}, "currentVersionId": 16777048551},
                    {"id": 12930193545, "name": "Lin Mood", "assetType": {"id": 78, "name": "MoodAnimation"}, "currentVersionId": 16663224844},
                    {"id": 301824116, "name": "XBOX_F - Torse", "assetType": {"id": 27, "name": "Torso"}, "currentVersionId": 11201616968},
                    {"id": 301823806, "name": "XBOX_F - Jambe droite", "assetType": {"id": 31, "name": "RightLeg"}, "currentVersionId": 11201616956},
                    {"id": 301823492, "name": "XBOX_F - Jambe gauche", "assetType": {"id": 30, "name": "LeftLeg"}, "currentVersionId": 11201616942},
                    {"id": 301822975, "name": "XBOX_F - Bras droit", "assetType": {"id": 28, "name": "RightArm"}, "currentVersionId": 28595007140},
                    {"id": 301822804, "name": "XBOX_F - Bras gauche", "assetType": {"id": 29, "name": "LeftArm"}, "currentVersionId": 28595027538},
                    {"id": 301820310, "name": "Lunettes de Lin", "assetType": {"id": 42, "name": "FaceAccessory"}, "currentVersionId": 2260433451},
                    {"id": 301818464, "name": "Cheveux de Lin", "assetType": {"id": 41, "name": "HairAccessory"}, "currentVersionId": 2260433432, "meta": {"order": 8, "puffiness": 0, "version": 1}},
                    {"id": 301810423, "name": "Pantalon de Lin", "assetType": {"id": 12, "name": "Pants"}, "currentVersionId": 589548721},
                    {"id": 301806786, "name": "Chemise de Lin", "assetType": {"id": 11, "name": "Shirt"}, "currentVersionId": 602474259}
                ]
            }
        }
    ]


def purchase_model(cookies,csrf_token,id):
    id = str(id)
    url = 'https://apis.roblox.com/marketplace-fiat-service/v1/product/purchase'

    payload = {
        "productKey": {
            "productNamespace": "PRODUCT_NAMESPACE_CREATOR_MARKETPLACE_ASSET",
            "productType": "PRODUCT_TYPE_MODEL",
            "productTargetId": id  # ID Model muốn mua
        },
        "expectedPrice": {
            "currencyCode": "USD",
            "quantity": {
                "significand": 0,
                "exponent": 0
            }
        }
    }

    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return True
    return False

def fvrt_game(cookies, csrf_token, game_id):
    url = f'https://games.roblox.com/v1/games/{game_id}/favorites'

    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    response = requests.post(url, headers=headers)

    if response.status_code == 200:
        return True
    return False


def noti_game(cookies, csrf_token, id, user_id):
    url = f'https://followings.roblox.com/v1/users/{user_id}/universes/{id}'

    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    response = requests.post(url, headers=headers)

    if response.status_code == 200:
        return True
    return False


def set_talent(cookies,csrf_token,user_id):


    url = f'https://apis.roblox.com/talent/v1/users/{user_id}/profile'
    payload = {
        "creatorDescription": "Tôi chuyên lập trình Lua và thiết kế UI/UX cho các game Roblox.",
        "isContactAllowed": True,
        "isOpenToWork": True,
        "interestDescription": "",
        "jobTypes": ["FullTime", "PartTime", "Commission"],
        "skillTypes": ["Graphics Design", "Development", "Animation", "Composing", "Sound Production", "UI Design", "Clothes Design"],
        "preferredContactLinkType": "Invalid"
    }

    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    response = requests.patch(url, json=payload, headers=headers)

    if response.status_code == 200:
        return True
    return False


def dislay_name(cookies,csrf_token,user_id):
    url = f"https://users.roblox.com/v1/users/{user_id}/display-names"
    payload = {
        "userId":8562628676,
        "newDisplayName":"TxZZDZ",
        "showAgedUpDisplayName":"false"
    }
    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }


    response = requests.patch(url, json=payload, headers=headers)

    if response.status_code == 200:
        return True
    return False


def social_link(cookies,csrf_token,users):
    url = f"https://accountinformation.roblox.com/v1/promotion-channels"
    payload = {
        "promotionChannelsVisibilityPrivacy":"AllUsers",
        "facebook":f"https://facebook.com/{users}",
        "twitter":f"@TXZZ123",
        "youtube":f"https://youtube.com/@{users}",
        "twitch":f"https://twitch.tv/{users}",
        "guilded":f"https://guilded.gg/{users}"
    }
    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

   
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        return True
    return False



def set_language(cookies,csrf_token):

    locales = [
    "en_us",  # English (US)
    "en_gb",  # English (UK)
    "vi_vn",  # Tiếng Việt
    "ko_kr",  # Korean
    "ja_jp",  # Japanese
    "zh_cn",  # Chinese (Simplified)
    "zh_tw",  # Chinese (Traditional)
    "de_de",  # German
    "es_es",  # Spanish (Spain)
    "es_mx",  # Spanish (Mexico)
    "fr_fr",  # French
    "it_it",  # Italian
    "pt_pt",  # Portuguese (Portugal)
    "pt_br",  # Portuguese (Brazil)
    "ru_ru",  # Russian
    "tr_tr",  # Turkish
    "pl_pl",  # Polish
    "nl_nl",  # Dutch
    "no_no",  # Norwegian
    "da_dk",  # Danish
    "sv_se",  # Swedish
    "fi_fi"   # Finnish
    ]

    x = random.choice(locales)



    url = f"https://locale.roblox.com/v1/locales/set-user-supported-locale"
    payload = {
        "supportedLocaleCode": x
        }
    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

   
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        return True
    return False   




def create_privatesv(cookies,csrf_token,id):
    id = str(id)
    url = f"https://games.roblox.com/v1/games/vip-servers/{id}"
    payload = {
        "name":"txzzpro",
        "expectedPrice":0
        }
    headers = {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

   
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        return True
    return False  



def create_gamepass(cookies,csrf_token,user_id):
    url = f"https://games.roblox.com/v2/users/{user_id}/games"

    response = requests.get(url)

    if response.status_code == 200:
        k = json.loads(response.text)
    id = k['data'][0]['rootPlace']['id']
    id = str(id)
    url = f"https://apis.roblox.com/universes/v1/places/{id}/universe"
    response = requests.get(url)
    x = response.json().get("universeId")
    x = str(x)
    N = [
        "VanThuong", "LyHoi", "BaoMinh", "KhangPro", "TuanNo1", "NamCute",
        "HuyLegend", "NgocSusu", "LinhMeo", "PhucHero", "MinhSuper", "DucVip",
        "AnhDark", "QuangGamer", "PhongKool", "HaiDragon", "SonDevil", "DatNoob",
        "HoangWin", "KietKing", "TrungTiger", "PhatJoker", "BinhGod", "VietFox",
        "LongXuka", "HanhBoss", "NhiPrincess", "ThanhShadow", "ChauWolf", "KhoaMaster",
        "ThaoCat", "MyAngel", "DuySamurai", "AnNaruto", "TinHunter", "YenFairy",
        "LuanWizard", "LoanQueen", "CuongKnight", "PhuongNinja", "BaoLion", "TrangBee",
        "QuyenElf", "DiemSky", "TuyenGhost", "HanBunny", "PhuKing", "LocRock",
        "ThinhPower", "HaSpark"
    ]
    Name =random.choice(N)
    G = [
        "Become a VIP and enjoy exclusive perks like VIP rooms, special tags, and bonus rewards every day! Only for the best players!",
        "Unlock the Ultimate Pack to gain access to rare items, secret abilities, and boost your progress faster than ever before!",
        "Get the Speed Boost Pass and zoom past your friends with unmatched speed and agility in every race!",
        "Activate the Double Coins Gamepass and earn twice the rewards to level up and unlock gear faster!",
        "Access the Premium Lounge with this pass and enjoy private areas, rare cosmetics, and secret missions!",
        "Equip the Exclusive Weapon Pack to dominate every battle with rare, powerful weapons only VIPs can wield!",
        "With the Extra Storage Pass, carry more items, store rare gear, and never worry about inventory space again!",
        "Unlock the Magic Powers Pass to unleash unique spells, summon creatures, and bend the world to your will!",
        "Get the Infinite Energy Pass and play endlessly without waiting for your energy to recharge!",
        "Own the Golden Armor Set and stand out from the crowd with sparkling, unbeatable armor that shows your true power!"
    ]


    Des = random.choice(G)
    
    url = 'https://apis.roblox.com/game-passes/v1/game-passes'


    headers = {
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    payload = {
        "Name": Name,
        "Description": Des,
        "UniverseId": x
    }

    response = requests.post(url, data=payload, headers=headers)
    x = response.json().get("gamePassId")
    if response.status_code == 200:
        return True,x



def create_afflink(cookies,csrf_token,user_id):
    url = f"https://games.roblox.com/v2/users/{user_id}/games"

    response = requests.get(url)

    if response.status_code == 200:
        k = json.loads(response.text)
    id = k['data'][0]['rootPlace']['id']
    id = str(id)
    url = f"https://apis.roblox.com/universes/v1/places/{id}/universe"
    response = requests.get(url)
    x = response.json().get("universeId")
    x = str(x)
    url = "https://apis.roblox.com/affiliate-links/v1/links"

    headers = {
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    N = [
        "VanThuong", "LyHoi", "BaoMinh", "KhangPro", "TuanNo1", "NamCute",
        "HuyLegend", "NgocSusu", "LinhMeo", "PhucHero", "MinhSuper", "DucVip",
        "AnhDark", "QuangGamer", "PhongKool", "HaiDragon", "SonDevil", "DatNoob",
        "HoangWin", "KietKing", "TrungTiger", "PhatJoker", "BinhGod", "VietFox",
        "LongXuka", "HanhBoss", "NhiPrincess", "ThanhShadow", "ChauWolf", "KhoaMaster",
        "ThaoCat", "MyAngel", "DuySamurai", "AnNaruto", "TinHunter", "YenFairy",
        "LuanWizard", "LoanQueen", "CuongKnight", "PhuongNinja", "BaoLion", "TrangBee",
        "QuyenElf", "DiemSky", "TuyenGhost", "HanBunny", "PhuKing", "LocRock",
        "ThinhPower", "HaSpark"
    ]
    Name =random.choice(N)


    payload = {
    "universeId": x,
    "campaignName": Name
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return True
    return False





def enable_notifymail(cookies,csrf_token):
    headers = {
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    url = "https://notifications.roblox.com/v2/notifications/notification-preferences"

    payload = {
        "updatedPreferences":[{"notificationType":"MarketingEmails","notificationChannel":"Email","preferenceStatus":"All"}]
        }    
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return True
    return False





def description(cookies,csrf_token,username):
    headers = {
        'X-CSRF-TOKEN': csrf_token,
        'Cookie': f'.ROBLOSECURITY={cookies}'
    }

    url = "https://users.roblox.com/v1/description"

    payload = {
        "description": username
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return True
    return False








def add_friend(cookies, xyz, username):
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--lang-en")
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = webdriver.Chrome(options=options)

    driver.get("https://www.roblox.com") 
    cookie = {
        "name": ".ROBLOSECURITY",
        "value": cookies,
        "domain": ".roblox.com",
        "path": "/",
        "secure": True,
        "httpOnly": True
    }
    driver.add_cookie(cookie)
    driver.refresh()
    time.sleep(2)
    
    try:
        a1 = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "I Agree")]'))
        )
        a1.click()
    except:
        pass

    for i in xyz:
        if i != username:
            try:
                print(f"Đang gửi lời mời kết bạn tới: {i}")
                driver.get(f"https://www.roblox.com/search/users?keyword={i}")

                target_element = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((
                        By.XPATH, f"//div[@class='text-overflow avatar-card-label ng-binding ng-scope' and text()='@{i}']"
                    ))
                )
                target_element.click()

                try:
                    add_friend_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((
                            By.XPATH, "//span[contains(@class, 'web-blox-css-tss-1283320-Button-textContainer') and text()='Add Friend']"
                        ))
                    )
                    add_friend_button.click()
                    print(f"Đã gửi lời mời kết bạn tới {i}")
                except:
                    try:
                        accept_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((
                                By.XPATH, "//span[contains(@class, 'web-blox-css-tss-1283320-Button-textContainer') and text()='Accept']"
                            ))
                        )
                        accept_button.click()
                        print(f"Đã chấp nhận kết bạn với {i}")

                    except:
                        try:
                            accept_button = WebDriverWait(driver, 10).until(
                                EC.element_to_be_clickable((
                                    By.XPATH, "//span[contains(@class, 'web-blox-css-tss-1283320-Button-textContainer') and text()='Accept Friend']"
                                ))
                            )
                            accept_button.click()
                            print(f"Đã chấp nhận kết bạn với {i}")
                        except:
                            pass
                time.sleep(2)


            except Exception as e:
                print(f"Lỗi khi xử lý {i}: {e}")

    driver.quit()
    print("Hoàn tất gửi kết bạn cho toàn bộ danh sách.")





def cart_item(cookies):
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--lang-en")
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = webdriver.Chrome(options=options)

    driver.get("https://www.roblox.com") 
    cookie = {
        "name": ".ROBLOSECURITY",
        "value": cookies,
        "domain": ".roblox.com",
        "path": "/",
        "secure": True,
        "httpOnly": True
    }
    driver.add_cookie(cookie)
    driver.refresh()
    time.sleep(2)
    xyz = ["117098257036480","134220735382184","138319082633471"]
    try:
        a1 = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "I Agree")]'))
        )
        a1.click()
    except:
        pass
    for i in xyz:
        driver.get(f"https://www.roblox.com/catalog/{i}")
        try:
            wait = WebDriverWait(driver, 10)
            add_to_cart_button = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'btn-primary-lg') and text()='Add to cart']"))
            )
            add_to_cart_button.click()       
        except:
            pass
        time.sleep(2)







def process(i,line,accounts,xyz):
    try:
        parts = line.strip().split(':', 2)
        if len(parts) < 3:
            with print_lock:
                print(Fore.RED + Style.BRIGHT + f"Account {i+1}/{len(accounts)}: Invalid Format")
            return
            
        username = parts[0]
        password = parts[1]
        cookies = parts[2]
        session = requests.Session()
        

        if not check_cookie_validity(session, cookies):
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Cookie Invalid")
            return
        with print_lock:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Cookie Valid")
        

        csrf_token = get_csrf_token(session, cookies)
        if not csrf_token:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Get CSRF token")
            return


        success, user_id = get_user_id(session, cookies, csrf_token)
        if not success:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Get User ID")
            return
        
        
        
        
        
        
        f = description(cookies,csrf_token,username)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Description Profile")
        else:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Description Profile")
        
        
        f1 = enable_notifymail(cookies,csrf_token)

        if f1:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Enable Notification Email")
        else:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Enable Notification Email")
                


        f = create_afflink(cookies,csrf_token,user_id)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Create Affiliate Links")
        else:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Create Affiliate Links")

        
        for _ in range(5):
            f,x = create_gamepass(cookies,csrf_token,user_id)
            if f:
                with print_lock:
                    print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Create Gamepass ID {x}")
            else:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Create Gamepas")

        f =set_language(cookies,csrf_token)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Set Random Language")    
        else:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Set Random Language")

        



        f = social_link(cookies,csrf_token,username)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Set Social Link (Facebook, Youtube, Twitter, Guilded, Twitch)")    
        else:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Set Social Link (Facebook, Youtube, Twitter, Guilded, Twitch)")



        f = dislay_name(cookies,csrf_token,user_id)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Set Dislay-name")
            
        else:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Set Dislay-name")



        f = set_talent(cookies,csrf_token,user_id)
        if f:
            with print_lock:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Set Profile Talent")
        else:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f"Failed To Set Profile Talent")
        
        item_config = random.choice(get_item_configs())
        
        success = purchase_item(session, cookies, csrf_token, user_id, item_config)
        
        if not success:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f"Failed To Purchase Item")
        with print_lock:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Purchase Item")


        wear_success= set_wearing_assets(session, cookies, csrf_token, item_config)
        
        if not wear_success:
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Set Outfit")
        with print_lock:   
            print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Set Outfit")

        k = [118727244,53326,8459456709,6810376207,14215126016,125459331,4607457995,47433,8459456709,339406852,14898036372,4572305378,2690222444,580221169,4641019260,8907590644,6740491328]
        for id in k:
            f = purchase_model(cookies,csrf_token,id)
            if f:
                with print_lock:
                    print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Purchase Model ID {id}")
            else:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Purchase Model ID {id}")
        
        g = [
            2788229376,  # Brookhaven 🏡RP
            8540346411,  # Blade Ball
            8737602449,  # DOORS 👁️
            142823291,   # Murder Mystery 2
            6839171747,  # Blox Fruits
            920587237,   # Tower of Hell
            13822889,    # Natural Disaster Survival
            7072715071,  # Evade
            292439477,   # Phantom Forces
            142645946,   # Welcome to Bloxburg
            2533391502,  # Anime Fighting Simulator
            3351674303,  # Pet Simulator X!
            1054526971,  # Mad City
            3956818381,  # Arsenal
            3260590327,  # King Legacy
            537413528,   # Ro-Ghoul [ALPHA]
            7991339063,  # Rainbow Friends
            6284583030,  # Your Bizarre Adventure
            4934471106,  # Shindo Life
            126884695634066
        ]
        for id in g:
            f = fvrt_game(cookies, csrf_token, id)
            if f:
                with print_lock:
                    print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Favorite Game {id}")
            else:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Favorite Game {id}")
        u = [
            1008451066,
            3258302407,
            3317679266,
            66654135,
            2440500124,
            383310974,
            2471084,
            113491250,
            903123786,
            1202096104,
            436796398,
            1335695570,
            1176784616,
            210851291,
            3085257211,
            2316994223,
            1691616425
        ]
        for id in u:
            f = noti_game(cookies, csrf_token, id, user_id)
            if f:
                with print_lock:
                    print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Notify Game ID {id}")
            else:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Notify Game ID {id}")



        universe_ids = [
            1204566291,
            1659645941,
            171035019,
            1491644357,
            838515212,
            383310974,
            1392301017,
            1887283673
        ]

        for id in universe_ids:
            f = create_privatesv(cookies, csrf_token,id)
            if f:
                with print_lock:
                    print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.GREEN + Style.BRIGHT + f": Successfully Create Private Sever ID {id} ")
            else:
                print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Failed To Create Private Sever ID {id} ")
        cart_item(cookies)
        add_friend(cookies, xyz, username)
            
    except Exception as e:
        print(Fore.CYAN + Style.BRIGHT + f"Process Account {i+1}/{len(accounts)}: {username}" + Fore.RED + Style.BRIGHT + f": Error: {str(e)}")
        
    time.sleep(3)  
    
    
    

















def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    
    print(Fore.MAGENTA + Style.BRIGHT + "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
    print(Fore.MAGENTA + Style.BRIGHT + "┃" + " " * 20 + Fore.YELLOW + Style.BRIGHT + "TOOL TEST CHO AXICU " + " " * 18 + Fore.MAGENTA + Style.BRIGHT + "┃")
    print(Fore.MAGENTA + Style.BRIGHT + "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")
    print()
    
    input_file = 'accounts.txt'
    xyz = []
    try:
        with open(input_file, 'r', encoding='utf-8') as file:
            accounts = [line for line in file if line.strip()]
        print(Fore.CYAN + Style.BRIGHT + f"Đã đọc {len(accounts)} tài khoản từ file {input_file}:")
        for i, line in enumerate(accounts, 1):
            username = line.split(':', 1)[0]
            print(Fore.GREEN + Style.BRIGHT + f"Dòng {i}: Tài khoản {username}")
            xyz.append(username)
        print()
    except FileNotFoundError:
        print(Fore.RED + Style.BRIGHT + f"Lỗi: Không tìm thấy file {input_file}")
        return


    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = [
            executor.submit(process, i, line, accounts, xyz) for i, line in enumerate(accounts)
        ]
        for future in futures:
            future.result()
    print(Fore.GREEN + Style.BRIGHT + "\nHoàn tất xử lý tất cả tài khoản!")
if __name__ == '__main__':
    main()
